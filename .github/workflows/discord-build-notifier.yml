name: Notify Discord about build status

on:
  workflow_call:
    inputs:
      build_status:
        required: true
        type: string
      build_number:
        required: false
        type: string
        default: ''
      filter_folder:
        required: false
        type: string
        default: ''
      filter_tag:
        required: false
        type: string
        default: ''
      author_icon_url:
        required: false
        type: string
        default: 'https://avatars.githubusercontent.com/u/1390178'
    secrets:
      DISCORD_WEBHOOK:
        required: true
    outputs:
      build_number:
        value: ${{ jobs.notify-discord.outputs.build_number }}

jobs:
  notify-discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1000
          fetch-tags: true
        if: inputs.build_number == ''

      - name: Get build number
        id: get-build-number
        continue-on-error: true
        env:
          ORIGINAL_BUILD_NUMBER: ${{ inputs.build_number }}
          FOLDER: ${{ inputs.filter_folder }}
          TAG_PREFIX: ${{ inputs.filter_tag }}
        # language=bash
        run: |
          # GitHub Actions runs bash with '-e' by default, so we need to disable it for this script
          # Failures in command substitutions are handled properly and should not fail the entire script
          set +e
          
          if [[ -n $ORIGINAL_BUILD_NUMBER ]]; then
            echo "Re-using build number $ORIGINAL_BUILD_NUMBER"
            echo "BUILD_NUMBER=$ORIGINAL_BUILD_NUMBER" >> $GITHUB_ENV
            exit 0
          fi
          
          FILTER_FOLDER=${{ env.FOLDER }}
          FILTER_TAG=${{ env.TAG_PREFIX }}
          
          # If one is empty, set it to the other. Subprojects should always have filters.
          if [[ -z $FILTER_TAG ]] && [[ -n $FILTER_FOLDER ]]; then
            true # NO-OP, filters are assigned already
          elif [[ -z $FILTER_TAG ]] && [[ -n $FILTER_FOLDER ]]; then
            FILTER_TAG=$FILTER_FOLDER
          elif [[ -z $FILTER_FOLDER ]] && [[ -n $FILTER_TAG ]] ; then
            FILTER_FOLDER=$FILTER_TAG
          else
            # Use default . so we can subtitute it in rev-list without using an if-statement
            FILTER_FOLDER=.
          fi
          
          # Debug messages so we can see what the filters are at runtime
          if [[ -n $FILTER_TAG ]]; then
            echo "Filter Folder: $FILTER_FOLDER"
            echo "Filter Tag:    $FILTER_TAG"
            echo ""
          
            if [[ $FILTER_TAG != *- ]]; then
              FILTER_TAG="${FILTER_TAG}-"
            fi
          fi
          
          # Get the latest tag based on the filter if any
          if [[ -n $FILTER_TAG ]]; then
            GIT_TAG=$(git describe --tags --abbrev=0 --match "$FILTER_TAG**")
          else
            GIT_TAG=$(git describe --tags --abbrev=0)
          fi
          
          # Validate that we actually have a tag
          if [[ -z $GIT_TAG ]]; then
            echo "No tags found! Using unknown build number."
            echo "BUILD_NUMBER=???" >> $GITHUB_ENV
            exit 1
          fi
          
          # Get the commit count since the tag (doesn't include tagged commit)
          COMMIT_COUNT=$(git rev-list "$GIT_TAG"..HEAD --count -- "$FILTER_FOLDER")
          
          echo "Git Tag:       $GIT_TAG"
          echo "Commits since: $COMMIT_COUNT"
          
          echo "BUILD_NUMBER=${GIT_TAG:${#FILTER_TAG}}.$COMMIT_COUNT" >> $GITHUB_ENV

      - name: Create JSON embed for Discord
        id: create-json
        uses: actions/github-script@v7
        env:
          build_status: ${{ inputs.build_status }}
          build_number: ${{ env.BUILD_NUMBER }}
          ref_type: ${{ github.ref_type }}
          ref_name: ${{ github.ref_name }}
          author_icon_url: ${{ inputs.author_icon_url }}
        with:
          result-encoding: string
          # language=js
          script: |
            'use strict';
            const capitalise = (str) => str.charAt(0).toUpperCase() + str.slice(1)
            const { build_status, build_number, ref_type, ref_name, author_icon_url } = process.env
            
            const title = capitalise(build_status)
            let colour
            switch (title) {
                case 'Success':
                    colour = 2684508
                    break
                case 'Failure':
                case 'Cancelled':
                    colour = 16071719
                    break
                case 'Started':
                    colour = 3224808
                    break
            }
            
            const json = {
                username: 'GitHub Actions',
                avatar_url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png',
                embeds: [{
                    author: {
                        name: context.payload.repository.name,
                        url: context.payload.repository.html_url,
                        icon_url: `${author_icon_url}`
                    },
                    url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`,
                    title: `${title}`,
                    color: `${colour}`,
                    fields: []
                }]
            }
            
            json.embeds[0].fields.push({
                name: 'Build number',
                value: build_number,
                inline: true
            })
            
            json.embeds[0].fields.push({
                name: `Build ${ref_type}`,
                value: `${ref_name}`,
                inline: true
            })
            
            if (title === 'Started') {
                json.embeds[0].fields.push({
                    name: 'Commit message',
                    value: `${context.payload.head_commit.message}`.replaceAll("'", "\\'")
                })
            }
            
            return JSON.stringify(json)

      - name: Send notification
        # language=bash
        run: |
          curl --http2-prior-knowledge --tlsv1.3 --false-start --tcp-fastopen --compressed -sS -m 10 -H "Content-Type: application/json" --request POST -d '${{ steps.create-json.outputs.result }}' ${{ env.DISCORD_WEBHOOK }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    outputs:
      build_number: ${{ env.BUILD_NUMBER }}
